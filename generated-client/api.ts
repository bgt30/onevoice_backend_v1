/* tslint:disable */
/* eslint-disable */
/**
 * OneVoice Backend API
 * AI-powered video dubbing service backend API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@onevoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiAuthForgotPasswordPost200Response
 */
export interface ApiAuthForgotPasswordPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthForgotPasswordPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiAuthForgotPasswordPostRequest
 */
export interface ApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthForgotPasswordPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ApiAuthResetPasswordPostRequest
 */
export interface ApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthResetPasswordPostRequest
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthResetPasswordPostRequest
     */
    'new_password': string;
}
/**
 * 
 * @export
 * @interface ApiBillingHistoryGet200Response
 */
export interface ApiBillingHistoryGet200Response {
    /**
     * 
     * @type {Array<ApiBillingHistoryGet200ResponseInvoicesInner>}
     * @memberof ApiBillingHistoryGet200Response
     */
    'invoices'?: Array<ApiBillingHistoryGet200ResponseInvoicesInner>;
    /**
     * 
     * @type {object}
     * @memberof ApiBillingHistoryGet200Response
     */
    'pagination'?: object;
}
/**
 * 
 * @export
 * @interface ApiBillingHistoryGet200ResponseInvoicesInner
 */
export interface ApiBillingHistoryGet200ResponseInvoicesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiBillingHistoryGet200ResponseInvoicesInner
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiBillingHistoryGet200ResponseInvoicesInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingHistoryGet200ResponseInvoicesInner
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingHistoryGet200ResponseInvoicesInner
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingHistoryGet200ResponseInvoicesInner
     */
    'created_at'?: string;
}
/**
 * 
 * @export
 * @interface ApiBillingPaymentMethodPutRequest
 */
export interface ApiBillingPaymentMethodPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiBillingPaymentMethodPutRequest
     */
    'payment_method_id': string;
}
/**
 * 
 * @export
 * @interface ApiBillingPaymentMethodsGet200ResponseInner
 */
export interface ApiBillingPaymentMethodsGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiBillingPaymentMethodsGet200ResponseInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingPaymentMethodsGet200ResponseInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingPaymentMethodsGet200ResponseInner
     */
    'last4'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingPaymentMethodsGet200ResponseInner
     */
    'brand'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiBillingPaymentMethodsGet200ResponseInner
     */
    'is_default'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiBillingSetupIntentPost200Response
 */
export interface ApiBillingSetupIntentPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiBillingSetupIntentPost200Response
     */
    'client_secret'?: string;
}
/**
 * 
 * @export
 * @interface ApiBillingSubscribePostRequest
 */
export interface ApiBillingSubscribePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiBillingSubscribePostRequest
     */
    'plan_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingSubscribePostRequest
     */
    'payment_method_id': string;
}
/**
 * 
 * @export
 * @interface ApiBillingSubscriptionPutRequest
 */
export interface ApiBillingSubscriptionPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiBillingSubscriptionPutRequest
     */
    'plan_id': string;
}
/**
 * 
 * @export
 * @interface ApiBillingUpcomingInvoiceGet200Response
 */
export interface ApiBillingUpcomingInvoiceGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiBillingUpcomingInvoiceGet200Response
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingUpcomingInvoiceGet200Response
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingUpcomingInvoiceGet200Response
     */
    'period_start'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiBillingUpcomingInvoiceGet200Response
     */
    'period_end'?: string;
}
/**
 * 
 * @export
 * @interface ApiBillingUsageGet200Response
 */
export interface ApiBillingUsageGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiBillingUsageGet200Response
     */
    'current_period_usage'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiBillingUsageGet200Response
     */
    'included_credits'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiBillingUsageGet200Response
     */
    'overage_credits'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiBillingUsageGet200Response
     */
    'overage_cost'?: number;
}
/**
 * 
 * @export
 * @interface ApiUsersActivityGet200Response
 */
export interface ApiUsersActivityGet200Response {
    /**
     * 
     * @type {Array<ApiUsersActivityGet200ResponseActivitiesInner>}
     * @memberof ApiUsersActivityGet200Response
     */
    'activities'?: Array<ApiUsersActivityGet200ResponseActivitiesInner>;
    /**
     * 
     * @type {object}
     * @memberof ApiUsersActivityGet200Response
     */
    'pagination'?: object;
}
/**
 * 
 * @export
 * @interface ApiUsersActivityGet200ResponseActivitiesInner
 */
export interface ApiUsersActivityGet200ResponseActivitiesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersActivityGet200ResponseActivitiesInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersActivityGet200ResponseActivitiesInner
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersActivityGet200ResponseActivitiesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersActivityGet200ResponseActivitiesInner
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface ApiUsersAvatarPost200Response
 */
export interface ApiUsersAvatarPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersAvatarPost200Response
     */
    'avatar_url'?: string;
}
/**
 * 
 * @export
 * @interface ApiUsersCreditsUsageGet200Response
 */
export interface ApiUsersCreditsUsageGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiUsersCreditsUsageGet200Response
     */
    'total_credits'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersCreditsUsageGet200Response
     */
    'used_credits'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersCreditsUsageGet200Response
     */
    'remaining_credits'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersCreditsUsageGet200Response
     */
    'current_period_start'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersCreditsUsageGet200Response
     */
    'current_period_end'?: string;
}
/**
 * 
 * @export
 * @interface ApiUsersDashboardStatsGet200Response
 */
export interface ApiUsersDashboardStatsGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiUsersDashboardStatsGet200Response
     */
    'total_videos'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersDashboardStatsGet200Response
     */
    'completed_videos'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersDashboardStatsGet200Response
     */
    'processing_videos'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersDashboardStatsGet200Response
     */
    'total_duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsersDashboardStatsGet200Response
     */
    'credits_used_this_month'?: number;
}
/**
 * 
 * @export
 * @interface ApiUsersDeleteAccountPostRequest
 */
export interface ApiUsersDeleteAccountPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersDeleteAccountPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiUsersNotificationsPreferencesGet200Response
 */
export interface ApiUsersNotificationsPreferencesGet200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiUsersNotificationsPreferencesGet200Response
     */
    'email_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiUsersNotificationsPreferencesGet200Response
     */
    'processing_complete'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiUsersNotificationsPreferencesGet200Response
     */
    'billing_updates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiUsersNotificationsPreferencesGet200Response
     */
    'marketing_emails'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiUsersPasswordPutRequest
 */
export interface ApiUsersPasswordPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPasswordPutRequest
     */
    'current_password': string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPasswordPutRequest
     */
    'new_password': string;
}
/**
 * 
 * @export
 * @interface ApiUsersProfilePutRequest
 */
export interface ApiUsersProfilePutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersProfilePutRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersProfilePutRequest
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersProfilePutRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ApiVideosGet200Response
 */
export interface ApiVideosGet200Response {
    /**
     * 
     * @type {Array<Video>}
     * @memberof ApiVideosGet200Response
     */
    'videos'?: Array<Video>;
    /**
     * 
     * @type {object}
     * @memberof ApiVideosGet200Response
     */
    'pagination'?: object;
}
/**
 * 
 * @export
 * @interface ApiVideosIdDownloadGet200Response
 */
export interface ApiVideosIdDownloadGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdDownloadGet200Response
     */
    'download_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdDownloadGet200Response
     */
    'expires_at'?: string;
}
/**
 * 
 * @export
 * @interface ApiVideosIdDubPost202Response
 */
export interface ApiVideosIdDubPost202Response {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdDubPost202Response
     */
    'job_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdDubPost202Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiVideosIdPutRequest
 */
export interface ApiVideosIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdPutRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdPutRequest
     */
    'description'?: string;
}

/**
 * 
 * @export
 * @interface ApiVideosIdThumbnailPost200Response
 */
export interface ApiVideosIdThumbnailPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosIdThumbnailPost200Response
     */
    'thumbnail_url'?: string;
}
/**
 * 
 * @export
 * @interface ApiVideosPostRequest
 */
export interface ApiVideosPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosPostRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosPostRequest
     */
    'original_language'?: string;
}

/**
 * 
 * @export
 * @interface ApiVideosUploadUrlPost200Response
 */
export interface ApiVideosUploadUrlPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosUploadUrlPost200Response
     */
    'upload_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosUploadUrlPost200Response
     */
    'video_id'?: string;
}
/**
 * 
 * @export
 * @interface ApiVideosUploadUrlPostRequest
 */
export interface ApiVideosUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiVideosUploadUrlPostRequest
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof ApiVideosUploadUrlPostRequest
     */
    'content_type': string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthResponse
     */
    'expires_in'?: number;
    /**
     * 
     * @type {User}
     * @memberof AuthResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface BillingPlan
 */
export interface BillingPlan {
    /**
     * 
     * @type {string}
     * @memberof BillingPlan
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingPlan
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof BillingPlan
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingPlan
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingPlan
     */
    'billing_period'?: BillingPlanBillingPeriodEnum;
    /**
     * 
     * @type {number}
     * @memberof BillingPlan
     */
    'credits_included'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BillingPlan
     */
    'features'?: Array<string>;
}

export const BillingPlanBillingPeriodEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;

export type BillingPlanBillingPeriodEnum = typeof BillingPlanBillingPeriodEnum[keyof typeof BillingPlanBillingPeriodEnum];

/**
 * 
 * @export
 * @interface DubRequest
 */
export interface DubRequest {
    /**
     * 
     * @type {string}
     * @memberof DubRequest
     */
    'target_language': string;
    /**
     * 
     * @type {string}
     * @memberof DubRequest
     */
    'voice_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof DubRequest
     */
    'preserve_background_music'?: boolean;
}
/**
 * 
 * @export
 * @interface JobStatus
 */
export interface JobStatus {
    /**
     * 
     * @type {string}
     * @memberof JobStatus
     */
    'job_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobStatus
     */
    'status'?: JobStatusStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof JobStatus
     */
    'progress'?: number;
    /**
     * 
     * @type {string}
     * @memberof JobStatus
     */
    'estimated_completion'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobStatus
     */
    'error_message'?: string;
}

export const JobStatusStatusEnum = {
    Pending: 'pending',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;

export type JobStatusStatusEnum = typeof JobStatusStatusEnum[keyof typeof JobStatusStatusEnum];

/**
 * 
 * @export
 * @interface Language
 */
export interface Language {
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'native_name'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ModelError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'full_name'?: string;
}
/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'status'?: SubscriptionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'current_period_start'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'current_period_end'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'cancel_at_period_end'?: boolean;
}

export const SubscriptionStatusEnum = {
    Active: 'active',
    Cancelled: 'cancelled',
    PastDue: 'past_due',
    Unpaid: 'unpaid'
} as const;

export type SubscriptionStatusEnum = typeof SubscriptionStatusEnum[keyof typeof SubscriptionStatusEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    'duration'?: number;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'original_language'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Video
     */
    'target_languages'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'status'?: VideoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'thumbnail_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'video_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'updated_at'?: string;
}

export const VideoStatusEnum = {
    Uploaded: 'uploaded',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed'
} as const;

export type VideoStatusEnum = typeof VideoStatusEnum[keyof typeof VideoStatusEnum];

/**
 * 
 * @export
 * @interface Voice
 */
export interface Voice {
    /**
     * 
     * @type {string}
     * @memberof Voice
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Voice
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Voice
     */
    'language'?: string;
    /**
     * 
     * @type {string}
     * @memberof Voice
     */
    'gender'?: VoiceGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Voice
     */
    'style'?: string;
    /**
     * 
     * @type {string}
     * @memberof Voice
     */
    'preview_url'?: string;
}

export const VoiceGenderEnum = {
    Male: 'male',
    Female: 'female',
    Neutral: 'neutral'
} as const;

export type VoiceGenderEnum = typeof VoiceGenderEnum[keyof typeof VoiceGenderEnum];


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Request password reset
         * @param {ApiAuthForgotPasswordPostRequest} apiAuthForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost: async (apiAuthForgotPasswordPostRequest: ApiAuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAuthForgotPasswordPostRequest' is not null or undefined
            assertParamExists('apiAuthForgotPasswordPost', 'apiAuthForgotPasswordPostRequest', apiAuthForgotPasswordPostRequest)
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset password with token
         * @param {ApiAuthResetPasswordPostRequest} apiAuthResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost: async (apiAuthResetPasswordPostRequest: ApiAuthResetPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAuthResetPasswordPostRequest' is not null or undefined
            assertParamExists('apiAuthResetPasswordPost', 'apiAuthResetPasswordPostRequest', apiAuthResetPasswordPostRequest)
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User registration
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignupPost: async (signupRequest: SignupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('apiAuthSignupPost', 'signupRequest', signupRequest)
            const localVarPath = `/api/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Request password reset
         * @param {ApiAuthForgotPasswordPostRequest} apiAuthForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthForgotPasswordPost(apiAuthForgotPasswordPostRequest: ApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthForgotPasswordPost(apiAuthForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset password with token
         * @param {ApiAuthResetPasswordPostRequest} apiAuthResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthResetPasswordPost(apiAuthResetPasswordPostRequest: ApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthResetPasswordPost(apiAuthResetPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User registration
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthSignupPost(signupRequest: SignupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthSignupPost(signupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Request password reset
         * @param {ApiAuthForgotPasswordPostRequest} apiAuthForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost(apiAuthForgotPasswordPostRequest: ApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiAuthForgotPasswordPost(apiAuthForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.apiAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset password with token
         * @param {ApiAuthResetPasswordPostRequest} apiAuthResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost(apiAuthResetPasswordPostRequest: ApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiAuthResetPasswordPost(apiAuthResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User registration
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignupPost(signupRequest: SignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.apiAuthSignupPost(signupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Request password reset
     * @param {ApiAuthForgotPasswordPostRequest} apiAuthForgotPasswordPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthForgotPasswordPost(apiAuthForgotPasswordPostRequest: ApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthForgotPasswordPost(apiAuthForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset password with token
     * @param {ApiAuthResetPasswordPostRequest} apiAuthResetPasswordPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthResetPasswordPost(apiAuthResetPasswordPostRequest: ApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthResetPasswordPost(apiAuthResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User registration
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthSignupPost(signupRequest: SignupRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthSignupPost(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BillingSubscriptionsApi - axios parameter creator
 * @export
 */
export const BillingSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get billing history
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingHistoryGet: async (page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update default payment method
         * @param {ApiBillingPaymentMethodPutRequest} apiBillingPaymentMethodPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPaymentMethodPut: async (apiBillingPaymentMethodPutRequest: ApiBillingPaymentMethodPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiBillingPaymentMethodPutRequest' is not null or undefined
            assertParamExists('apiBillingPaymentMethodPut', 'apiBillingPaymentMethodPutRequest', apiBillingPaymentMethodPutRequest)
            const localVarPath = `/api/billing/payment-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiBillingPaymentMethodPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPaymentMethodsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete payment method
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPaymentMethodsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBillingPaymentMethodsIdDelete', 'id', id)
            const localVarPath = `/api/billing/payment-methods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get available billing plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPlansGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create setup intent for payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSetupIntentPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/setup-intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new subscription
         * @param {ApiBillingSubscribePostRequest} apiBillingSubscribePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscribePost: async (apiBillingSubscribePostRequest: ApiBillingSubscribePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiBillingSubscribePostRequest' is not null or undefined
            assertParamExists('apiBillingSubscribePost', 'apiBillingSubscribePostRequest', apiBillingSubscribePostRequest)
            const localVarPath = `/api/billing/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiBillingSubscribePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionCancelPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/subscription/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update subscription
         * @param {ApiBillingSubscriptionPutRequest} apiBillingSubscriptionPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionPut: async (apiBillingSubscriptionPutRequest: ApiBillingSubscriptionPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiBillingSubscriptionPutRequest' is not null or undefined
            assertParamExists('apiBillingSubscriptionPut', 'apiBillingSubscriptionPutRequest', apiBillingSubscriptionPutRequest)
            const localVarPath = `/api/billing/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiBillingSubscriptionPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resume cancelled subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionResumePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/subscription/resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get upcoming invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingUpcomingInvoiceGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/upcoming-invoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get billing usage details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingUsageGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingSubscriptionsApi - functional programming interface
 * @export
 */
export const BillingSubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingSubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get billing history
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingHistoryGet(page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBillingHistoryGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingHistoryGet(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingHistoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update default payment method
         * @param {ApiBillingPaymentMethodPutRequest} apiBillingPaymentMethodPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingPaymentMethodPut(apiBillingPaymentMethodPutRequest: ApiBillingPaymentMethodPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingPaymentMethodPut(apiBillingPaymentMethodPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingPaymentMethodPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingPaymentMethodsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiBillingPaymentMethodsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingPaymentMethodsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingPaymentMethodsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete payment method
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingPaymentMethodsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingPaymentMethodsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingPaymentMethodsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get available billing plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingPlansGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillingPlan>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingPlansGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingPlansGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create setup intent for payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingSetupIntentPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBillingSetupIntentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingSetupIntentPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingSetupIntentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new subscription
         * @param {ApiBillingSubscribePostRequest} apiBillingSubscribePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingSubscribePost(apiBillingSubscribePostRequest: ApiBillingSubscribePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingSubscribePost(apiBillingSubscribePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingSubscribePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingSubscriptionCancelPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingSubscriptionCancelPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingSubscriptionCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingSubscriptionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingSubscriptionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingSubscriptionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update subscription
         * @param {ApiBillingSubscriptionPutRequest} apiBillingSubscriptionPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingSubscriptionPut(apiBillingSubscriptionPutRequest: ApiBillingSubscriptionPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingSubscriptionPut(apiBillingSubscriptionPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingSubscriptionPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Resume cancelled subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingSubscriptionResumePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingSubscriptionResumePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingSubscriptionResumePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get upcoming invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingUpcomingInvoiceGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBillingUpcomingInvoiceGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingUpcomingInvoiceGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingUpcomingInvoiceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get billing usage details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillingUsageGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBillingUsageGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBillingUsageGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillingSubscriptionsApi.apiBillingUsageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BillingSubscriptionsApi - factory interface
 * @export
 */
export const BillingSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingSubscriptionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get billing history
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingHistoryGet(page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiBillingHistoryGet200Response> {
            return localVarFp.apiBillingHistoryGet(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update default payment method
         * @param {ApiBillingPaymentMethodPutRequest} apiBillingPaymentMethodPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPaymentMethodPut(apiBillingPaymentMethodPutRequest: ApiBillingPaymentMethodPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiBillingPaymentMethodPut(apiBillingPaymentMethodPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPaymentMethodsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiBillingPaymentMethodsGet200ResponseInner>> {
            return localVarFp.apiBillingPaymentMethodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete payment method
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPaymentMethodsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiBillingPaymentMethodsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get available billing plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingPlansGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BillingPlan>> {
            return localVarFp.apiBillingPlansGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create setup intent for payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSetupIntentPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiBillingSetupIntentPost200Response> {
            return localVarFp.apiBillingSetupIntentPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new subscription
         * @param {ApiBillingSubscribePostRequest} apiBillingSubscribePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscribePost(apiBillingSubscribePostRequest: ApiBillingSubscribePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.apiBillingSubscribePost(apiBillingSubscribePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionCancelPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiBillingSubscriptionCancelPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionGet(options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.apiBillingSubscriptionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update subscription
         * @param {ApiBillingSubscriptionPutRequest} apiBillingSubscriptionPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionPut(apiBillingSubscriptionPutRequest: ApiBillingSubscriptionPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.apiBillingSubscriptionPut(apiBillingSubscriptionPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resume cancelled subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingSubscriptionResumePost(options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.apiBillingSubscriptionResumePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get upcoming invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingUpcomingInvoiceGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiBillingUpcomingInvoiceGet200Response> {
            return localVarFp.apiBillingUpcomingInvoiceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get billing usage details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillingUsageGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiBillingUsageGet200Response> {
            return localVarFp.apiBillingUsageGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillingSubscriptionsApi - object-oriented interface
 * @export
 * @class BillingSubscriptionsApi
 * @extends {BaseAPI}
 */
export class BillingSubscriptionsApi extends BaseAPI {
    /**
     * 
     * @summary Get billing history
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingHistoryGet(page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingHistoryGet(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update default payment method
     * @param {ApiBillingPaymentMethodPutRequest} apiBillingPaymentMethodPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingPaymentMethodPut(apiBillingPaymentMethodPutRequest: ApiBillingPaymentMethodPutRequest, options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingPaymentMethodPut(apiBillingPaymentMethodPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all payment methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingPaymentMethodsGet(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingPaymentMethodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete payment method
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingPaymentMethodsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingPaymentMethodsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get available billing plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingPlansGet(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingPlansGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create setup intent for payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingSetupIntentPost(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingSetupIntentPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new subscription
     * @param {ApiBillingSubscribePostRequest} apiBillingSubscribePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingSubscribePost(apiBillingSubscribePostRequest: ApiBillingSubscribePostRequest, options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingSubscribePost(apiBillingSubscribePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingSubscriptionCancelPost(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingSubscriptionCancelPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingSubscriptionGet(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingSubscriptionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update subscription
     * @param {ApiBillingSubscriptionPutRequest} apiBillingSubscriptionPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingSubscriptionPut(apiBillingSubscriptionPutRequest: ApiBillingSubscriptionPutRequest, options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingSubscriptionPut(apiBillingSubscriptionPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resume cancelled subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingSubscriptionResumePost(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingSubscriptionResumePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get upcoming invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingUpcomingInvoiceGet(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingUpcomingInvoiceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get billing usage details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingSubscriptionsApi
     */
    public apiBillingUsageGet(options?: RawAxiosRequestConfig) {
        return BillingSubscriptionsApiFp(this.configuration).apiBillingUsageGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user activity log
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersActivityGet: async (page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersAvatarDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload user avatar
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersAvatarPost: async (avatar?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user credits usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersCreditsUsageGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/credits/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get dashboard statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersDashboardStatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/dashboard/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user account
         * @param {ApiUsersDeleteAccountPostRequest} apiUsersDeleteAccountPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersDeleteAccountPost: async (apiUsersDeleteAccountPostRequest: ApiUsersDeleteAccountPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUsersDeleteAccountPostRequest' is not null or undefined
            assertParamExists('apiUsersDeleteAccountPost', 'apiUsersDeleteAccountPostRequest', apiUsersDeleteAccountPostRequest)
            const localVarPath = `/api/users/delete-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUsersDeleteAccountPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get notification preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersNotificationsPreferencesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/notifications/preferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update notification preferences
         * @param {ApiUsersNotificationsPreferencesGet200Response} apiUsersNotificationsPreferencesGet200Response 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersNotificationsPreferencesPut: async (apiUsersNotificationsPreferencesGet200Response: ApiUsersNotificationsPreferencesGet200Response, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUsersNotificationsPreferencesGet200Response' is not null or undefined
            assertParamExists('apiUsersNotificationsPreferencesPut', 'apiUsersNotificationsPreferencesGet200Response', apiUsersNotificationsPreferencesGet200Response)
            const localVarPath = `/api/users/notifications/preferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUsersNotificationsPreferencesGet200Response, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change user password
         * @param {ApiUsersPasswordPutRequest} apiUsersPasswordPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPasswordPut: async (apiUsersPasswordPutRequest: ApiUsersPasswordPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUsersPasswordPutRequest' is not null or undefined
            assertParamExists('apiUsersPasswordPut', 'apiUsersPasswordPutRequest', apiUsersPasswordPutRequest)
            const localVarPath = `/api/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUsersPasswordPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user profile
         * @param {ApiUsersProfilePutRequest} apiUsersProfilePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfilePut: async (apiUsersProfilePutRequest: ApiUsersProfilePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUsersProfilePutRequest' is not null or undefined
            assertParamExists('apiUsersProfilePut', 'apiUsersProfilePutRequest', apiUsersProfilePutRequest)
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUsersProfilePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user subscription details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersSubscriptionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user activity log
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersActivityGet(page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersActivityGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersActivityGet(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersActivityGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete user avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersAvatarDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersAvatarDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersAvatarDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload user avatar
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersAvatarPost(avatar?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersAvatarPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersAvatarPost(avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersAvatarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user credits usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersCreditsUsageGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersCreditsUsageGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersCreditsUsageGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersCreditsUsageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get dashboard statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersDashboardStatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersDashboardStatsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersDashboardStatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersDashboardStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete user account
         * @param {ApiUsersDeleteAccountPostRequest} apiUsersDeleteAccountPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersDeleteAccountPost(apiUsersDeleteAccountPostRequest: ApiUsersDeleteAccountPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersDeleteAccountPost(apiUsersDeleteAccountPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersDeleteAccountPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get notification preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersNotificationsPreferencesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUsersNotificationsPreferencesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersNotificationsPreferencesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersNotificationsPreferencesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update notification preferences
         * @param {ApiUsersNotificationsPreferencesGet200Response} apiUsersNotificationsPreferencesGet200Response 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersNotificationsPreferencesPut(apiUsersNotificationsPreferencesGet200Response: ApiUsersNotificationsPreferencesGet200Response, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersNotificationsPreferencesPut(apiUsersNotificationsPreferencesGet200Response, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersNotificationsPreferencesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change user password
         * @param {ApiUsersPasswordPutRequest} apiUsersPasswordPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPasswordPut(apiUsersPasswordPutRequest: ApiUsersPasswordPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPasswordPut(apiUsersPasswordPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersPasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user profile
         * @param {ApiUsersProfilePutRequest} apiUsersProfilePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersProfilePut(apiUsersProfilePutRequest: ApiUsersProfilePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersProfilePut(apiUsersProfilePutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user subscription details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersSubscriptionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersSubscriptionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.apiUsersSubscriptionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user activity log
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersActivityGet(page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiUsersActivityGet200Response> {
            return localVarFp.apiUsersActivityGet(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersAvatarDelete(options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiUsersAvatarDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload user avatar
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersAvatarPost(avatar?: File, options?: RawAxiosRequestConfig): AxiosPromise<ApiUsersAvatarPost200Response> {
            return localVarFp.apiUsersAvatarPost(avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user credits usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersCreditsUsageGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiUsersCreditsUsageGet200Response> {
            return localVarFp.apiUsersCreditsUsageGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get dashboard statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersDashboardStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiUsersDashboardStatsGet200Response> {
            return localVarFp.apiUsersDashboardStatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user account
         * @param {ApiUsersDeleteAccountPostRequest} apiUsersDeleteAccountPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersDeleteAccountPost(apiUsersDeleteAccountPostRequest: ApiUsersDeleteAccountPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiUsersDeleteAccountPost(apiUsersDeleteAccountPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get notification preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersNotificationsPreferencesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiUsersNotificationsPreferencesGet200Response> {
            return localVarFp.apiUsersNotificationsPreferencesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update notification preferences
         * @param {ApiUsersNotificationsPreferencesGet200Response} apiUsersNotificationsPreferencesGet200Response 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersNotificationsPreferencesPut(apiUsersNotificationsPreferencesGet200Response: ApiUsersNotificationsPreferencesGet200Response, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiUsersNotificationsPreferencesPut(apiUsersNotificationsPreferencesGet200Response, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change user password
         * @param {ApiUsersPasswordPutRequest} apiUsersPasswordPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPasswordPut(apiUsersPasswordPutRequest: ApiUsersPasswordPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiUsersPasswordPut(apiUsersPasswordPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.apiUsersProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user profile
         * @param {ApiUsersProfilePutRequest} apiUsersProfilePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfilePut(apiUsersProfilePutRequest: ApiUsersProfilePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.apiUsersProfilePut(apiUsersProfilePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user subscription details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersSubscriptionGet(options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.apiUsersSubscriptionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI {
    /**
     * 
     * @summary Get user activity log
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersActivityGet(page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersActivityGet(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersAvatarDelete(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersAvatarDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload user avatar
     * @param {File} [avatar] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersAvatarPost(avatar?: File, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersAvatarPost(avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user credits usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersCreditsUsageGet(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersCreditsUsageGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get dashboard statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersDashboardStatsGet(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersDashboardStatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user account
     * @param {ApiUsersDeleteAccountPostRequest} apiUsersDeleteAccountPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersDeleteAccountPost(apiUsersDeleteAccountPostRequest: ApiUsersDeleteAccountPostRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersDeleteAccountPost(apiUsersDeleteAccountPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get notification preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersNotificationsPreferencesGet(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersNotificationsPreferencesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update notification preferences
     * @param {ApiUsersNotificationsPreferencesGet200Response} apiUsersNotificationsPreferencesGet200Response 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersNotificationsPreferencesPut(apiUsersNotificationsPreferencesGet200Response: ApiUsersNotificationsPreferencesGet200Response, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersNotificationsPreferencesPut(apiUsersNotificationsPreferencesGet200Response, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change user password
     * @param {ApiUsersPasswordPutRequest} apiUsersPasswordPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersPasswordPut(apiUsersPasswordPutRequest: ApiUsersPasswordPutRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersPasswordPut(apiUsersPasswordPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersProfileGet(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user profile
     * @param {ApiUsersProfilePutRequest} apiUsersProfilePutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersProfilePut(apiUsersProfilePutRequest: ApiUsersProfilePutRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersProfilePut(apiUsersProfilePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user subscription details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUsersSubscriptionGet(options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUsersSubscriptionGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VideoManagementApi - axios parameter creator
 * @export
 */
export const VideoManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user videos
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {ApiVideosGetStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosGet: async (page?: number, perPage?: number, status?: ApiVideosGetStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel video processing
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdCancelPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdCancelPost', 'id', id)
            const localVarPath = `/api/videos/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete video
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdDelete', 'id', id)
            const localVarPath = `/api/videos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download processed video
         * @param {string} id 
         * @param {string} [language] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDownloadGet: async (id: string, language?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdDownloadGet', 'id', id)
            const localVarPath = `/api/videos/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start video dubbing process
         * @param {string} id 
         * @param {DubRequest} dubRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDubPost: async (id: string, dubRequest: DubRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdDubPost', 'id', id)
            // verify required parameter 'dubRequest' is not null or undefined
            assertParamExists('apiVideosIdDubPost', 'dubRequest', dubRequest)
            const localVarPath = `/api/videos/{id}/dub`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dubRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Duplicate video
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDuplicatePost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdDuplicatePost', 'id', id)
            const localVarPath = `/api/videos/{id}/duplicate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get video by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdGet', 'id', id)
            const localVarPath = `/api/videos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update video
         * @param {string} id 
         * @param {ApiVideosIdPutRequest} apiVideosIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdPut: async (id: string, apiVideosIdPutRequest: ApiVideosIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdPut', 'id', id)
            // verify required parameter 'apiVideosIdPutRequest' is not null or undefined
            assertParamExists('apiVideosIdPut', 'apiVideosIdPutRequest', apiVideosIdPutRequest)
            const localVarPath = `/api/videos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiVideosIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },

        /**
         * 
         * @summary Get video processing status
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdStatusGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdStatusGet', 'id', id)
            const localVarPath = `/api/videos/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate or update video thumbnail
         * @param {string} id 
         * @param {File} [thumbnail] 
         * @param {number} [timestamp] Time in seconds to extract thumbnail from video
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdThumbnailPost: async (id: string, thumbnail?: File, timestamp?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiVideosIdThumbnailPost', 'id', id)
            const localVarPath = `/api/videos/{id}/thumbnail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', thumbnail as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.append('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get supported languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosLanguagesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/videos/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new video
         * @param {ApiVideosPostRequest} apiVideosPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosPost: async (apiVideosPostRequest: ApiVideosPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiVideosPostRequest' is not null or undefined
            assertParamExists('apiVideosPost', 'apiVideosPostRequest', apiVideosPostRequest)
            const localVarPath = `/api/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiVideosPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },


        /**
         * 
         * @summary Get pre-signed upload URL
         * @param {ApiVideosUploadUrlPostRequest} apiVideosUploadUrlPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosUploadUrlPost: async (apiVideosUploadUrlPostRequest: ApiVideosUploadUrlPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiVideosUploadUrlPostRequest' is not null or undefined
            assertParamExists('apiVideosUploadUrlPost', 'apiVideosUploadUrlPostRequest', apiVideosUploadUrlPostRequest)
            const localVarPath = `/api/videos/upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiVideosUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get available voices for language
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosVoicesGet: async (language: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('apiVideosVoicesGet', 'language', language)
            const localVarPath = `/api/videos/voices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoManagementApi - functional programming interface
 * @export
 */
export const VideoManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user videos
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {ApiVideosGetStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosGet(page?: number, perPage?: number, status?: ApiVideosGetStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVideosGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosGet(page, perPage, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel video processing
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdCancelPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdCancelPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete video
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download processed video
         * @param {string} id 
         * @param {string} [language] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdDownloadGet(id: string, language?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVideosIdDownloadGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdDownloadGet(id, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdDownloadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Start video dubbing process
         * @param {string} id 
         * @param {DubRequest} dubRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdDubPost(id: string, dubRequest: DubRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVideosIdDubPost202Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdDubPost(id, dubRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdDubPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Duplicate video
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdDuplicatePost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdDuplicatePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdDuplicatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get video by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update video
         * @param {string} id 
         * @param {ApiVideosIdPutRequest} apiVideosIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdPut(id: string, apiVideosIdPutRequest: ApiVideosIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdPut(id, apiVideosIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create shareable link for video
         * @param {string} id 
         * @param {ApiVideosIdSharePostRequest} apiVideosIdSharePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdSharePost(id: string, apiVideosIdSharePostRequest: ApiVideosIdSharePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVideosIdSharePost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdSharePost(id, apiVideosIdSharePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdSharePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get video processing status
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdStatusGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdStatusGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generate or update video thumbnail
         * @param {string} id 
         * @param {File} [thumbnail] 
         * @param {number} [timestamp] Time in seconds to extract thumbnail from video
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosIdThumbnailPost(id: string, thumbnail?: File, timestamp?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVideosIdThumbnailPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosIdThumbnailPost(id, thumbnail, timestamp, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosIdThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get supported languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosLanguagesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Language>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosLanguagesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosLanguagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new video
         * @param {ApiVideosPostRequest} apiVideosPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosPost(apiVideosPostRequest: ApiVideosPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosPost(apiVideosPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },


        /**
         * 
         * @summary Get pre-signed upload URL
         * @param {ApiVideosUploadUrlPostRequest} apiVideosUploadUrlPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosUploadUrlPost(apiVideosUploadUrlPostRequest: ApiVideosUploadUrlPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVideosUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosUploadUrlPost(apiVideosUploadUrlPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosUploadUrlPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get available voices for language
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVideosVoicesGet(language: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Voice>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVideosVoicesGet(language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoManagementApi.apiVideosVoicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VideoManagementApi - factory interface
 * @export
 */
export const VideoManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user videos
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {ApiVideosGetStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosGet(page?: number, perPage?: number, status?: ApiVideosGetStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<ApiVideosGet200Response> {
            return localVarFp.apiVideosGet(page, perPage, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel video processing
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdCancelPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiVideosIdCancelPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete video
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthForgotPasswordPost200Response> {
            return localVarFp.apiVideosIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download processed video
         * @param {string} id 
         * @param {string} [language] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDownloadGet(id: string, language?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiVideosIdDownloadGet200Response> {
            return localVarFp.apiVideosIdDownloadGet(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start video dubbing process
         * @param {string} id 
         * @param {DubRequest} dubRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDubPost(id: string, dubRequest: DubRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiVideosIdDubPost202Response> {
            return localVarFp.apiVideosIdDubPost(id, dubRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Duplicate video
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdDuplicatePost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.apiVideosIdDuplicatePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get video by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.apiVideosIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update video
         * @param {string} id 
         * @param {ApiVideosIdPutRequest} apiVideosIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdPut(id: string, apiVideosIdPutRequest: ApiVideosIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.apiVideosIdPut(id, apiVideosIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create shareable link for video
         * @param {string} id 
         * @param {ApiVideosIdSharePostRequest} apiVideosIdSharePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdSharePost(id: string, apiVideosIdSharePostRequest: ApiVideosIdSharePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiVideosIdSharePost201Response> {
            return localVarFp.apiVideosIdSharePost(id, apiVideosIdSharePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get video processing status
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdStatusGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<JobStatus> {
            return localVarFp.apiVideosIdStatusGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate or update video thumbnail
         * @param {string} id 
         * @param {File} [thumbnail] 
         * @param {number} [timestamp] Time in seconds to extract thumbnail from video
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosIdThumbnailPost(id: string, thumbnail?: File, timestamp?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiVideosIdThumbnailPost200Response> {
            return localVarFp.apiVideosIdThumbnailPost(id, thumbnail, timestamp, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get supported languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosLanguagesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Language>> {
            return localVarFp.apiVideosLanguagesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new video
         * @param {ApiVideosPostRequest} apiVideosPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosPost(apiVideosPostRequest: ApiVideosPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.apiVideosPost(apiVideosPostRequest, options).then((request) => request(axios, basePath));
        },


        /**
         * 
         * @summary Get pre-signed upload URL
         * @param {ApiVideosUploadUrlPostRequest} apiVideosUploadUrlPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosUploadUrlPost(apiVideosUploadUrlPostRequest: ApiVideosUploadUrlPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiVideosUploadUrlPost200Response> {
            return localVarFp.apiVideosUploadUrlPost(apiVideosUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get available voices for language
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVideosVoicesGet(language: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Voice>> {
            return localVarFp.apiVideosVoicesGet(language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoManagementApi - object-oriented interface
 * @export
 * @class VideoManagementApi
 * @extends {BaseAPI}
 */
export class VideoManagementApi extends BaseAPI {
    /**
     * 
     * @summary Get user videos
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {ApiVideosGetStatusEnum} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosGet(page?: number, perPage?: number, status?: ApiVideosGetStatusEnum, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosGet(page, perPage, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel video processing
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdCancelPost(id: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdCancelPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete video
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download processed video
     * @param {string} id 
     * @param {string} [language] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdDownloadGet(id: string, language?: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdDownloadGet(id, language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start video dubbing process
     * @param {string} id 
     * @param {DubRequest} dubRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdDubPost(id: string, dubRequest: DubRequest, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdDubPost(id, dubRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Duplicate video
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdDuplicatePost(id: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdDuplicatePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get video by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdGet(id: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update video
     * @param {string} id 
     * @param {ApiVideosIdPutRequest} apiVideosIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdPut(id: string, apiVideosIdPutRequest: ApiVideosIdPutRequest, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdPut(id, apiVideosIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create shareable link for video
     * @param {string} id 
     * @param {ApiVideosIdSharePostRequest} apiVideosIdSharePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdSharePost(id: string, apiVideosIdSharePostRequest: ApiVideosIdSharePostRequest, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdSharePost(id, apiVideosIdSharePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get video processing status
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdStatusGet(id: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdStatusGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate or update video thumbnail
     * @param {string} id 
     * @param {File} [thumbnail] 
     * @param {number} [timestamp] Time in seconds to extract thumbnail from video
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosIdThumbnailPost(id: string, thumbnail?: File, timestamp?: number, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosIdThumbnailPost(id, thumbnail, timestamp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get supported languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosLanguagesGet(options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosLanguagesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new video
     * @param {ApiVideosPostRequest} apiVideosPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosPost(apiVideosPostRequest: ApiVideosPostRequest, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosPost(apiVideosPostRequest, options).then((request) => request(this.axios, this.basePath));
    }





    /**
     * 
     * @summary Get pre-signed upload URL
     * @param {ApiVideosUploadUrlPostRequest} apiVideosUploadUrlPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosUploadUrlPost(apiVideosUploadUrlPostRequest: ApiVideosUploadUrlPostRequest, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosUploadUrlPost(apiVideosUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get available voices for language
     * @param {string} language 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoManagementApi
     */
    public apiVideosVoicesGet(language: string, options?: RawAxiosRequestConfig) {
        return VideoManagementApiFp(this.configuration).apiVideosVoicesGet(language, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiVideosGetStatusEnum = {
    Uploaded: 'uploaded',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed'
} as const;
export type ApiVideosGetStatusEnum = typeof ApiVideosGetStatusEnum[keyof typeof ApiVideosGetStatusEnum];


